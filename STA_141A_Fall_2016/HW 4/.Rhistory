# extract Year
library(stringr)
yr.ptn = "\\(\\d{4}\\)"
result.year = str_extract(str_extract(result.text, yr.ptn), "\\d{4}")
# ====================================================================
# extract authors
author.ptn = " [[:alnum:] ,\\.]*\\("
pt = "\\s{2,}"
# author
result.author = str_split_fixed(result.text, "\\(", n = 2)[,1]
# remove redundent spaces and \n
result.author = str_trim(gsub(pt, " ", gsub("\n", " ", result.author)))
# remove word "and"
result.author = gsub("and", "", result.author)
#  list containing co_author names
co_authors = sapply(1:length(result.author),
function(i) {str_split(result.author[i], "\\.\\,\\s")})
# list of number of co-authors
nm_co_authors = sapply(co_authors, length)
# ====================================================================
# extract title
result.title = str_split_fixed(result.text, "\\)[,\\.]", n = 2)[,2]
# remove redundent spaces and \n
result.title = str_trim(gsub(pt, " ", gsub("\n", " ", result.title)))
# ====================================================================
# extract $em which containts Title of Journal
result.em = sapply(1:length(result), function(i) xmlValue(result[[i]]$em))
result.em = result.em[index]
# formatting Journal name
# remove redundent spaces and \n
result.em = gsub(pt, " ", gsub("\n", " ", result.em))
result.em = gsub("(Journal of (the)?)", "J.", result.em)
result.em = gsub("\\&", "and", result.em)
# dealing with special cases
result.em = ifelse((result.em == "J. Royal Statistical Society"),
"J. Royal Statistical Society B",
ifelse( (result.em == "Proc. National Academy of Sciences USA"),
"Proceedings of the National Academy of Sciences USA",
ifelse( (result.em ==  "Sankhya"), "Sankhya A",
ifelse( (result.em %in%
c("J. of Gerontology -- Biological Sciences",
"J. of Gerontology --Biological Sciences")),
"J. of Gerontology - Biological Sciences", result.em))
)
)
# ====================================================================
# extract $strong which contains "Volume"
result.strong = sapply(1:length(result), function(i) xmlValue(result[[i]]$strong))
result.strong = result.strong[index]
# deal with special case
result.strong = ifelse( (result.strong == "B 76"), "76", result.strong)
# ====================================================================
# extract $a / websites
### One problem here is that it cannot work with multiple a tags
result = result[index]
result.website = sapply(1:length(result), function(i) {
ifelse(is.null(result[[i]]$a), NA,
xmlAttrs(result[[i]]$a)) } )
result.website[grepl("http(s)?://", result.website)==F] = NA
# ====================================================================
Result = as_data_frame(cbind(result.year, result.author, nm_co_authors, result.title,
result.em, result.strong, result.website))
colnames(Result) = c("Year of Publication", "Authors", "# of Co-authors",
"Title of Publication", "Journal title",
"Journal Volume", "URL for the publication")
# removing no publication rows
index2 = which(is.na(Result$'Year of Publication')==F)
Result = Result[index2,]
setwd("~/Dropbox/Course Fall 2016/STA 141/HW 4")
write_csv(Result, path = "Question2.csv", na = "NA")
}
library(tidyverse)
setwd("~/Dropbox/Course Fall 2016/STA 141/HW 4")
HW4.q2()
TEST.Data = read_csv("Question2.csv")
setdiff(links, TEST.Data$`URL for the publication`)
setdiff(TEST.Data$`URL for the publication`, links)
gsub("VIN: ", "", "VIN: 12345678910111111")
get_car_info = function(file) {
# Information Needed
# ========================================================================
# (i) Model (Year and Make) of the car
# pattern of year.make.model
# This pattern basically extracts the first line of this text,
#       so it starts with 4-digit year and end with (\n)
# later "year", "make" and "model" information can be extract from "model"
model.ptn = "[1-2][0-9]{3} .*(\n)"
Model = str_extract(file, model.ptn)
# extract year
Year = str_split_fixed(Model, " ", n = 2)[1]
# extract maker, assuming all makers only contain one word
Make = str_split_fixed(Model, " ", n = 3)[2]
# Capitalize each word to make it easier for grouping
Make = str_to_title(tolower(Make))
# Add to two special cases
Make = ifelse(Make == "Excel", "Excel Peterson",
ifelse(Make == "Land", "Land Rover", Make))
# extract Model Info
Model = str_split_fixed(Model, " ", n = 2)[2]
Model = gsub("\n", "", Model) # formatting
# ========================================================================
# (ii) Vehicle Identification Number (VIN)
# VIN has 17 characters and ended with digit
VIN.ptn = "VIN: [a-zA-Z0-9]{16}[0-9]"
VIN = str_extract(file, VIN.ptn)
VIN = gsub("VIN: ", "", VIN)
#str_split(VIN, " ")[[1]][2]
# ========================================================================
# (iii) Price
Pr.ptn = "\\$[0-9]{1,3}(,[0-9]{3})+"
Price = str_extract(file, Pr.ptn)[1]
Price = gsub("\\$", "", Price)
# str_split_fixed(Price, "", n = 2)[2] # eliminating $
# ========================================================================
# (iv) Mileage
Ml.ptn = "Mileage: [0-9]{1,3}(,[0-9]{3})*"
Mile = str_extract(file, Ml.ptn)
Mile = gsub("Mileage: ", "", Mile)
# str_split(Mile, " ")[[1]][2] # extract only number
# ========================================================================
# (v) Color (Interior and Exterior)
Int.C.ptn = "Interior: [a-zA-Z\\s]*(Body|Transmission|Engine)"
Int.C = str_extract(file, Int.C.ptn)
Int.C = gsub("(Interior: )|(Body|Transmission|Engine)", "", Int.C)
#Int.C = str_split_fixed(Int.C, " ", n =2)[2]
#Int.C = str_split_fixed(Int.C, "(Body|Transmission|Engine)", n=2)[1]
Int.C = tolower(Int.C) # formatting
Ex.C.ptn = "Exterior: [a-zA-Z\\s]*(Body|Interior|Transmission|Engine)"
Ex.C = str_extract(file, Ex.C.ptn)
Ex.C = gsub("(Exterior: )(Body|Interior|Transmission|Engine)", "", Ex.C)
#Ex.C = str_split_fixed(Ex.C, " ", n =2)[2]
#Ex.C = str_split_fixed(Ex.C, "(Body|Interior|Transmission|Engine)", n=2)[1]
Ex.C = tolower(Ex.C) # formatting
# ========================================================================
# (vi) Transmission
Trans.ptn = "Transmission: [a-zA-Z0-9\\s-\\(\\)]*(Engine)"
Trans = str_extract(file, Trans.ptn)
Trans = gsub("(Transmission: )|(Engine)", "", Trans)
#Trans = str_split_fixed(Trans, " ", n = 2)[2]
#Trans = str_split_fixed(Trans, "(Engine)", n=2)[1]
# ========================================================================
# (vii) Engine displacement (in liters)
Eng.ptn = "Engine: [\\d]*[.][\\d]*(\\ )?L"
Eng = str_extract(file, Eng.ptn)
Eng = gsub("Engine: ", "", Eng)
# Eng = str_split_fixed(Eng, " ", n = 2)[2]
Eng = gsub(" ", "", Eng) # reformating pattern like 2.4L and 2.4 L to be same
# Here another experssion of Engine is listed in cylinder/V6/V8 format
Eng.ptn2 = "([46]{1} (cyl))|(v[68])"
Eng2 = str_extract(tolower(file), Eng.ptn2) # formatting
# ========================================================================
# (viii) Name of company selling the car
Com.ptn = "Offered by: [a-zA-Z0-9\\s\\'\\&\\,]*[a-zA-Z0-9\\.]"
Company = str_extract(file, Com.ptn)
Company = gsub("Offered by:", "", Company)
#Company = str_split_fixed(Company, ": ", n = 2)[2]
# ========================================================================
# (ix) Street address of the company
Add.ptn = "Address: [a-zA-Z0-9\\s\\,\\-\\&]*[0-9]"
Address = str_extract(file, Add.ptn)
Address = gsub("Address: ", "", Address)
# Address = str_split_fixed(Address, " ", n = 2)[2]
# ========================================================================
# (x) Phone number of the company
Ph.ptn = "Phone: \\([0-9]{3}\\)\\s[0-9]{3}[-][0-9]{4}"
Phone = str_extract(file, Ph.ptn)
Phone = gsub("Phone: ", "", Phone)
# Phone = str_split_fixed(Phone, " ", n = 2)[2]
# ========================================================================
# (xi) Website of the company
Wb.ptn = "Website: [a-zA-Z0-9\\.\\-]*(\\/|(com)|(net))"
Website = str_extract(file, Wb.ptn)
Website = gsub("Website: ", "", Website)
# Website = str_split_fixed(Website, " ", n = 2)[2]
# Combine all information into result
result = c(Year, Make, Model, VIN, Price, Mile,
Int.C, Ex.C, Trans, Eng, Eng2, Company,
Address, Phone, Website)
return(result)
}
HW4.q1 = function ( ) {
library(stringr)
paths = str_c("./CarAdvert/",ad.names)
text = sapply(paths, read_file_text)
All_Car_Info = sapply(text, get_car_info)
# name every row
row.names(All_Car_Info) = c("Year", "Make", "Model","VIN", "Price($)", "Mileage", "Interior Color", "Exterior Color", "Transmission", "Engine(L)", "Engine2(Cyls)", "Company", "Address", "Phone", "Website")
# return the result in data.frame with
#       each row representing the information of each car
result = as_data_frame(t(All_Car_Info))
# add another column showing the name of each file for future diagnosis
result[,15] = ad.names
return(result)
}
# Write result into a csv file
library(tidyverse)
write_csv(HW4.q1(), path = "Question1.csv", na = "NA")
Info.Cars = read_csv("Question1.csv")
dim(Info.Cars) # 1531   14
sum(is.na(Info.Cars$Year)) # no missing for "YEAR"
Make.list = table(Info.Cars$Make)
1531 - sum(Make.list) # no missing for "MAKE"
sum(is.na(Info.Cars$Model))
1531 - sum(VIN.list) # 2
Int.Color.list = table(Info.Cars$`Interior Color`)
1531 - sum(Int.Color.list) # 340
Ex.Color.list = table(Info.Cars$`Exterior Color`)
1531 - sum(Ex.Color.list) # 36
Tran.list = table(Info.Cars$Transmission)
1531 - sum(Tran.list) # 139
Eng.list = table(Info.Cars$"Engine(L)")
1531 - sum(Eng.list) # 523 Missing
Eng2.list = table(Info.Cars$"Engine2(Cyls)")
1531 - sum(Eng2.list) # 524 Missing
Com.list = table(Info.Cars$Company)
1531 - sum(Com.list) # no missing
1531 - sum(table(Info.Cars$Address)) # no missing
1531 - sum(table(Info.Cars$Phone)) # no missing
1531 - sum(table(Info.Cars$Website)) # no
Info.Cars$`Interior Color`
# Set Working Directory
setwd("~/Dropbox/Course Fall 2016/STA 141/HW 4")
# List all the names of advertisement files.
ad.names = list.files(path = "./CarAdvert")
# check if all files are listed
length(ad.names) # 1531
# Write a function that can work with one file.
# This function can extract the text inside the file.
read_file_text = function (file) {
# use readLines() function to read the plain text.
ln = readLines(file) # Read each lne in the text
# paste thing together to make it easier to search
tex = paste(ln, collapse = "\n") # text
}
get_car_info = function(file) {
# Information Needed
# ========================================================================
# (i) Model (Year and Make) of the car
# pattern of year.make.model
# This pattern basically extracts the first line of this text,
#       so it starts with 4-digit year and end with (\n)
# later "year", "make" and "model" information can be extract from "model"
model.ptn = "[1-2][0-9]{3} .*(\n)"
Model = str_extract(file, model.ptn)
# extract year
Year = str_split_fixed(Model, " ", n = 2)[1]
# extract maker, assuming all makers only contain one word
#       Note that there are special cases, which will be addressed later
Make = str_split_fixed(Model, " ", n = 3)[2]
# Capitalize each word to make it easier for grouping
Make = str_to_title(tolower(Make))
# Add to two special cases
Make = ifelse(Make == "Excel", "Excel Peterson",
ifelse(Make == "Land", "Land Rover", Make))
# extract Model Info
Model = str_split_fixed(Model, " ", n = 2)[2]
Model = gsub("\n", "", Model) # formatting
# ========================================================================
# (ii) Vehicle Identification Number (VIN)
# VIN has 17 characters and ended with digit
VIN.ptn = "VIN: [a-zA-Z0-9]{16}[0-9]"
VIN = str_extract(file, VIN.ptn)
VIN = gsub("VIN: ", "", VIN)
# ========================================================================
# (iii) Price
# Price starts with $ and contains digits and ","
Pr.ptn = "\\$[0-9]{1,3}(,[0-9]{3})+"
Price = str_extract(file, Pr.ptn)[1]
Price = gsub("\\$", "", Price)
# ========================================================================
# (iv) Mileage
# Mileage starts with word "Mileage" and followed by digits
Ml.ptn = "Mileage: [0-9]{1,3}(,[0-9]{3})*"
Mile = str_extract(file, Ml.ptn)
Mile = gsub("Mileage: ", "", Mile)
# ========================================================================
# (v) Color (Interior and Exterior)
# Interior color is something between "Interior:" and
#       "Body" or "Transmission" or "Engine"
Int.C.ptn = "Interior: [a-zA-Z\\s]*(Body|Transmission|Engine)"
Int.C = str_extract(file, Int.C.ptn)
Int.C = gsub("(Interior: )|(Body|Transmission|Engine)", "", Int.C)
Int.C = tolower(Int.C) # formatting, easy for later categorizing
# Exterior color is something between "Exterior:" and
#       "Interior" or "Body" or "Transmission" or "Engine"
Ex.C.ptn = "Exterior: [a-zA-Z\\s]*(Body|Interior|Transmission|Engine)"
Ex.C = str_extract(file, Ex.C.ptn)
Ex.C = gsub("(Exterior: )(Body|Interior|Transmission|Engine)", "", Ex.C)
Ex.C = tolower(Ex.C) # formatting, easy for later categorizing
# ========================================================================
# (vi) Transmission
# Transmission is something between "Transmission:" and "Engine"
Trans.ptn = "Transmission: [a-zA-Z0-9\\s-\\(\\)]*(Engine)"
Trans = str_extract(file, Trans.ptn)
Trans = gsub("(Transmission: )|(Engine)", "", Trans)
# ========================================================================
# (vii) Engine displacement (in liters)
# Engine in liters is in the format like, "2.4 L" or "2.4L"
Eng.ptn = "Engine: [*]*[\\d][.][\\d](\\ )?L"
Eng = str_extract(file, Eng.ptn)
Eng = str_extract(Eng, "[\\d][.][\\d](\\ )?L")
Eng = gsub(" ", "", Eng) # reformating pattern like 2.4L and 2.4 L to be same
# Here another experssion of Engine is listed in cylinder/V6/V8 format
Eng.ptn2 = "([46]{1} (cyl))|(v[68])"
Eng2 = str_extract(tolower(file), Eng.ptn2) # formatting
# ========================================================================
# (viii) Name of company selling the car
# Company name is something after "Offered by: "
Com.ptn = "Offered by: [a-zA-Z0-9\\s\\'\\&\\,]*[a-zA-Z0-9\\.]"
Company = str_extract(file, Com.ptn)
Company = gsub("Offered by:", "", Company)
# ========================================================================
# (ix) Street address of the company
# Company Address is something after "Address: "
Add.ptn = "Address: [a-zA-Z0-9\\s\\,\\-\\&]*[0-9]"
Address = str_extract(file, Add.ptn)
Address = gsub("Address: ", "", Address)
# ========================================================================
# (x) Phone number of the company
Ph.ptn = "Phone: \\([0-9]{3}\\)\\s[0-9]{3}[-][0-9]{4}"
Phone = str_extract(file, Ph.ptn)
Phone = gsub("Phone: ", "", Phone)
# ========================================================================
# (xi) Website of the company
# Website starts with "Website: "
Wb.ptn = "Website: [a-zA-Z0-9\\.\\-]*(\\/|(com)|(net))"
Website = str_extract(file, Wb.ptn)
Website = gsub("Website: ", "", Website)
# Combine all information into result
result = c(Year, Make, Model, VIN, Price, Mile,
Int.C, Ex.C, Trans, Eng, Eng2, Company,
Address, Phone, Website)
return(result)
}
HW4.q1 = function ( ) {
library(stringr)
paths = str_c("./CarAdvert/",ad.names)
text = sapply(paths, read_file_text)
All_Car_Info = sapply(text, get_car_info)
# name every row
row.names(All_Car_Info) = c("Year", "Make", "Model","VIN", "Price($)", "Mileage", "Interior Color", "Exterior Color", "Transmission", "Engine(L)", "Engine2(Cyls)", "Company", "Address", "Phone", "Website")
# return the result in data.frame with
#       each row representing the information of each car
result = as_data_frame(t(All_Car_Info))
# add another column showing the name of each file for future diagnosis
result[,15] = ad.names
return(result)
}
# Write result into a csv file
library(tidyverse)
write_csv(HW4.q1(), path = "Question1.csv", na = "NA")
Info.Cars = read_csv("Question1.csv")
dim(Info.Cars) # 1531   15
sum(is.na(Info.Cars$Year)) # no missing for "YEAR"
Make.list = table(Info.Cars$Make)
1531 - sum(Make.list) # no missing for "MAKE"
sum(is.na(Info.Cars$Model))
Eng.list = table(Info.Cars$"Engine(L)")
1531 - sum(Eng.list) # 523 Missing
library(tidyverse)
setwd("~/Dropbox/Course Fall 2016/STA 141/HW 4")
HW4.q2()
TEST.Data = read_csv("Question2.csv")
library(Amelia)
missmap(TEST.Data, main = "Missing Values vs Observed Extracted from Website")
?mapply
calculate.beta.sigma = function () {
X = rchisq(100, 6, ncp = 0)
epsilon = rnorm(100, mean = 0, sd = 1)
Y = -5 + 2*X + epsilon
model = lm(Y ~ X)
beta0 = model$coefficients[1]
beta1 = model$coefficients[2]
SSE = sum(model$residuals^2) # sum of squared residuals
n = 100
MSE = SSE / (n-2) # mean squared residuals
est.sigma2 = MSE
return(c(beta0, beta1, est.sigma2))
}
test = lappy(1:400, calculate.beta.sigma)
calculate.beta.sigma = function () {
X = rchisq(100, 6, ncp = 0)
epsilon = rnorm(100, mean = 0, sd = 1)
Y = -5 + 2*X + epsilon
model = lm(Y ~ X)
beta0 = model$coefficients[1]
beta1 = model$coefficients[2]
SSE = sum(model$residuals^2) # sum of squared residuals
n = 100
MSE = SSE / (n-2) # mean squared residuals
est.sigma2 = MSE
return(c(beta0, beta1, est.sigma2))
}
test = lapply(1:400, calculate.beta.sigma)
test = lapply(1:400, calculate.beta.sigma())
calculate.beta.sigma = function (i) {
X = rchisq(100, 6, ncp = 0)
epsilon = rnorm(100, mean = 0, sd = 1)
Y = -5 + 2*X + epsilon
model = lm(Y ~ X)
beta0 = model$coefficients[1]
beta1 = model$coefficients[2]
SSE = sum(model$residuals^2) # sum of squared residuals
n = 100
MSE = SSE / (n-2) # mean squared residuals
est.sigma2 = MSE
return(c(beta0, beta1, est.sigma2))
}
test = lapply(1:400, calculate.beta.sigma)
test
result = do.call(rbind, test)
dim(result)
dim(result)
names(result)
colname(result) = c("beta0", "beta1", "sigma2")
colnames(result) = c("beta0", "beta1", "sigma2")
dim(result) # 400 3
head(result)
rlt.400.times = lapply(1:400, calculate.beta.sigma)
library(tidyverse)
rlt.400.times = do.call(rbind, rlt.400.times)
colnames(rlt.400.times) = c("beta0", "beta1", "sigma2")
dim(rlt.400.times) # 400 3
?var
colnames(rlt.400.times) = c("beta0", "beta1", "sigma2")
# calculate mean and variance of beta0
mean.beta0 = mean(rlt.400.times$beta0)
var.beta0 = var(rlt.400.times$beta0)
# calculate mean and variance of beta1
mean.beta1 = mean(rlt.400.times$beta1)
var.beta1 = var(rlt.400.times$beta1)
# calculate mean and variance of sigma2
mean.sigma2 = mean(rlt.400.times$sigma2)
var.sigma2 = var(rlt.400.times$sigma2)
mean.beta0 = mean(rlt.400.times$beta0)
rlt.400.times$beta0
class(rlt.400.times)
mean.beta0 = mean(rlt.400.times[,1])
var.beta0 = var(rlt.400.times[,1])
mean.beta1 = mean(rlt.400.times[,2])
var.beta1 = var(rlt.400.times[,2])
mean.sigma2 = mean(rlt.400.times[,3])
var.sigma2 = var(rlt.400.times[,3])
ggplot(aes(rlt.400.times[,1])) + geom_density()
ggplot(rlt.400.times, aes(rlt.400.times[,1])) + geom_density()
rlt.400.times = as_data_frame(do.call(rbind, rlt.400.times))
rlt.400.times = lapply(1:400, calculate.beta.sigma)
rlt.400.times = as_data_frame(do.call(rbind, rlt.400.times))
colnames(rlt.400.times) = c("beta0", "beta1", "sigma2")
mean.beta0 = mean(rlt.400.times[,1])
var.beta0 = var(rlt.400.times[,1])
# calculate mean and variance of beta1
mean.beta1 = mean(rlt.400.times[,2])
var.beta1 = var(rlt.400.times[,2])
# calculate mean and variance of sigma2
mean.sigma2 = mean(rlt.400.times[,3])
var.sigma2 = var(rlt.400.times[,3])
ggplot(rlt.400.times, aes(rlt.400.times[,1])) + geom_density()
ggplot(rlt.400.times, aes(beta0)) + geom_density()
ggplot(rlt.400.times, aes(beta0), fill = beta0) + geom_density()
ggplot(rlt.400.times, aes(beta0, fill = beta0)) + geom_density()
ggplot(rlt.400.times, aes(beta0)) + geom_density(fill = beta0)
ggplot(rlt.400.times, aes(beta0, fill = I(lightblue))) + geom_density()
ggplot(rlt.400.times, aes(beta0), fill = I(lightblue)) + geom_density()
ggplot(rlt.400.times, aes(beta0), fill = I(lightblue)) + geom_hist()
ggplot(rlt.400.times, aes(beta0), fill = I(lightblue)) + geom_histogram()
ggplot(rlt.400.times, aes(beta0, fill = beta0, colour = beta0)) +
geom_density(alpha = 0.1)
ggplot(rlt.400.times, aes(beta0, fill = blue, colour = beta0)) +
geom_density(alpha = 0.1)
ggplot(rlt.400.times, aes(beta0, fill = I(blue), colour = beta0)) +
geom_density(alpha = 0.1)
ggplot(rlt.400.times, aes(beta0, fill = I(blue), colour = beta0)) +
geom_density(alpha = 0.1)
ggplot(rlt.400.times, aes(beta0)) + geom_density(alpha = 0.1)
library(ggplot2)
library(reshape2)
data<- melt(rlt.400.times)
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25)
density(rlt.400.times$beta0)
plot(density(rlt.400.times$beta0))
par(mfrow=c(3,1))
par(mfrow=c(3,1))
plot(density(rlt.400.times$beta0))
main = "Density Plot of Estimation of Beta0 with 400 Bootstrap Replicates"
plot(density(rlt.400.times$beta1))
main = "Density Plot of Estimation of Beta1 with 400 Bootstrap Replicates"
plot(density(rlt.400.times$sigma2))
main = "Density Plot of Estimation of Sigma^2 with 400 Bootstrap Replicates"
par(mfrow=c(3,1))
plot(density(rlt.400.times$beta0))
main = "Density Plot of Estimation of Beta0 with 400 Bootstrap Replicates"
plot(density(rlt.400.times$beta1))
main = "Density Plot of Estimation of Beta1 with 400 Bootstrap Replicates"
plot(density(rlt.400.times$sigma2))
main = "Density Plot of Estimation of Sigma^2 with 400 Bootstrap Replicates"
table(Info.Cars$Make)
?corrgram
library(corrgram)
?corrgram
?qnorm
qnorm(1-0.05/2)
CI_beta0_low = mean.beta0 - qnorm(1-0.05/2) * sqrt(var.beta0)
CI_beta0_low = mean.beta0 - qnorm(1-0.05/2) * sqrt(var.beta0)
CI_beta0_high = mean.beta0 + qnorm(1-0.05/2) * sqrt(var.beta0)
CI_beta0_low = mean.beta1 - qnorm(1-0.05/2) * sqrt(var.beta1)
CI_beta0_high = mean.beta1 - qnorm(1-0.05/2) * sqrt(var.beta1)
CI_beta0_low = mean.beta0 - qnorm(1-0.05/2) * sqrt(var.beta0)
CI_beta0_low
mean.beta0 = mean(rlt.400.times[,1])
mean.beta0
rlt.400.times
