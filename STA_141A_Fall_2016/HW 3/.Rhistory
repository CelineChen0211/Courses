N1 = matrix(0, length(c), length(b)) # of Si-NH bondings
N2 = matrix(0, length(c), length(b)) # of Si-NH2 bondings
G = matrix(0, length(c), length(b)) # Gibbs free energy
H = matrix(0, length(c), length(b)) # Enthalpy
S = matrix(0, length(c), length(b)) # Entropy
for (i in 1:length(c)) {
print(i/length(c)) # See the progess
for (j in 1:length(b)){
a = 1 - b(j) - c(i)
if (a >= 0) {
N1[i,j] = GEM (a,b(j),c(i)) [[1]]
N2[i,j] = GEM (a,b(j),c(i)) [[2]]
G[i,j] = GEM (a,b(j),c(i)) [[3]]
H[i,j] = GEM (a,b(j),c(i)) [[4]]
S[i,j] = GEM (a,b(j),c(i)) [[5]]
}
}
}
step = 0.05
c = seq(0:0.6:step)
b = seq(0:(4-4*c)/7:step)
N1 = matrix(0, length(c), length(b)) # of Si-NH bondings
N2 = matrix(0, length(c), length(b)) # of Si-NH2 bondings
G = matrix(0, length(c), length(b)) # Gibbs free energy
H = matrix(0, length(c), length(b)) # Enthalpy
S = matrix(0, length(c), length(b)) # Entropy
for (i in 1:length(c)) {
print(i/length(c)) # See the progess
for (j in 1:length(b)){
a = 1 - b[j] - c[i]
if (a >= 0) {
N1[i,j] = GEM (a,b[j],c[i]) [[1]]
N2[i,j] = GEM (a,b[j],c[i]) [[2]]
G[i,j] = GEM (a,b[j],c[i]) [[3]]
H[i,j] = GEM (a,b[j],c[i]) [[4]]
S[i,j] = GEM (a,b[j],c[i]) [[5]]
}
}
}
View(test)
test[[1]]
test[[5]]
step = 0.05
c = seq(0:0.6:step)
b = seq(0:(4-4*c)/7:step)
N1 = matrix(0, length(c), length(b)) # of Si-NH bondings
N2 = matrix(0, length(c), length(b)) # of Si-NH2 bondings
G = matrix(0, length(c), length(b)) # Gibbs free energy
H = matrix(0, length(c), length(b)) # Enthalpy
S = matrix(0, length(c), length(b)) # Entropy
for (i in 1:length(c)) {
print(i/length(c)) # See the progess
for (j in 1:length(b)){
a = 1 - b[j] - c[i]
if (a >= 0) {
N1[i,j] = GEM (a,b[j],c[i]) [[1]]
N2[i,j] = GEM (a,b[j],c[i]) [[2]]
G[i,j] = GEM (a,b[j],c[i]) [[3]]
H[i,j] = GEM (a,b[j],c[i]) [[4]]
S[i,j] = GEM (a,b[j],c[i]) [[5]]
}
}
}
# Gibbs Free Energy Model for Different SiaNbHc
step = 0.01
c_seq = seq(0.05,0.7,step)
N_Si_NH = matrix(0, length(c_seq), length(c_seq)) # of Si-NH bondings
N_Si_NH2 = matrix(0, length(c_seq), length(c_seq)) # of Si-NH2 bondings
N_Si_Si = matrix(0, length(c_seq), length(c_seq))  # Si-Si bond = 0.1345
N_Si_N = matrix(0, length(c_seq), length(c_seq))  # Si-N bond where here N is not linked to other Hydrogen
N_Si_H = matrix(0, length(c_seq), length(c_seq))  # Si-H bond
N_N_H = matrix(0, length(c_seq), length(c_seq))  # N-H bond
G = matrix(0, length(c_seq), length(c_seq)) # Gibbs free energy
H = matrix(0, length(c_seq), length(c_seq)) # Enthalpy
S = matrix(0, length(c_seq), length(c_seq)) # Entropy
for (i in 1:length(c_seq)) {
b_seq = seq(0.05,(4-5*c_seq[i])/7,step)
for (j in 1:length(b_seq)){
print(j/length(b_seq)) # See the progess
a = 1 - b_seq[j] - c_seq[i]
b = b_seq[j]
c = c_seq[i]
if (a >= 0) {
# The most important step
#       optimization of GEM function
Result = optim(c(0.001, 0.001), GEM)
E.Si_Si = 2.34
E.Si_N = 3.45
E.Si_H = 3.34
E.N_H = 4.05
E.Si = 4.68
E.N2 = 4.91
E.H2 = 2.27
N_Si_NH[i,j] = Result$par[1] # of Si-NH bondings
N_Si_NH2[i,j] = Result$par[2] # of Si-NH2 bondings
N_Si_Si[i,j] = (4*a - 3*b - c + 2*N_Si_NH[i,j] + 4*N_Si_NH2[i,j])/2  # Si-Si bond = 0.1345
N_Si_N[i,j] = 3*b - 2*N_Si_NH[i,j] - 3*N_Si_NH2[i,j]  # Si-N bond where here N is not linked to other Hydrogen
N_Si_H[i,j] = c - N_Si_NH[i,j] - 2*N_Si_NH2[i,j]  # Si-H bond
N_N_H[i,j] = N_Si_NH[i,j] + 2*N_Si_NH2[i,j]  # N-H bond
G[i,j] = Result$value # Gibbs free energy
H[i,j] = ( N_Si_Si[i,j]*E.Si_Si + (N_Si_N[i,j]+N_Si_NH[i,j]+N_Si_NH2[i,j])*E.Si_N
+ N_Si_H[i,j]*E.Si_H + N_N_H[i,j]*E.N_H
- (a*E.Si + b*E.N2 + c*E.H2) ) * -96.5 # Enthalpy
S[i,j] = (H[i,j] - G[i,j])*1000/300 # Entropy
}
}
}
rm(a)
rm(b)
rm(C)
rm(c)
rm(A)
source('~/Dropbox/Research/In Progess/Intel SiNH Sample/R/Different Composition.R')
source('~/Dropbox/Research/In Progess/Intel SiNH Sample/R/Gibbs Free Energy Function.R')
step = 0.01
c_seq = seq(0.05,0.7,step)
N_Si_NH = matrix(0, length(c_seq), length(c_seq)) # of Si-NH bondings
N_Si_NH2 = matrix(0, length(c_seq), length(c_seq)) # of Si-NH2 bondings
N_Si_Si = matrix(0, length(c_seq), length(c_seq))  # Si-Si bond = 0.1345
N_Si_N = matrix(0, length(c_seq), length(c_seq))  # Si-N bond where here N is not linked to other Hydrogen
N_Si_H = matrix(0, length(c_seq), length(c_seq))  # Si-H bond
N_N_H = matrix(0, length(c_seq), length(c_seq))  # N-H bond
G = matrix(0, length(c_seq), length(c_seq)) # Gibbs free energy
H = matrix(0, length(c_seq), length(c_seq)) # Enthalpy
S = matrix(0, length(c_seq), length(c_seq)) # Entropy
for (i in 1:length(c_seq)) {
b_seq = seq(0.05,(4-5*c_seq[i])/7,step)
for (j in 1:length(b_seq)){
print(j/length(b_seq)) # See the progess
a = 1 - b_seq[j] - c_seq[i]
b = b_seq[j]
c = c_seq[i]
if (a >= 0) {
# The most important step
#       optimization of GEM function
Result = optim(c(0.001, 0.001), GEM)
E.Si_Si = 2.34
E.Si_N = 3.45
E.Si_H = 3.34
E.N_H = 4.05
E.Si = 4.68
E.N2 = 4.91
E.H2 = 2.27
N_Si_NH[i,j] = Result$par[1] # of Si-NH bondings
N_Si_NH2[i,j] = Result$par[2] # of Si-NH2 bondings
N_Si_Si[i,j] = (4*a - 3*b - c + 2*N_Si_NH[i,j] + 4*N_Si_NH2[i,j])/2  # Si-Si bond = 0.1345
N_Si_N[i,j] = 3*b - 2*N_Si_NH[i,j] - 3*N_Si_NH2[i,j]  # Si-N bond where here N is not linked to other Hydrogen
N_Si_H[i,j] = c - N_Si_NH[i,j] - 2*N_Si_NH2[i,j]  # Si-H bond
N_N_H[i,j] = N_Si_NH[i,j] + 2*N_Si_NH2[i,j]  # N-H bond
G[i,j] = Result$value # Gibbs free energy
H[i,j] = ( N_Si_Si[i,j]*E.Si_Si + (N_Si_N[i,j]+N_Si_NH[i,j]+N_Si_NH2[i,j])*E.Si_N
+ N_Si_H[i,j]*E.Si_H + N_N_H[i,j]*E.N_H
- (a*E.Si + b*E.N2 + c*E.H2) ) * -96.5 # Enthalpy
S[i,j] = (H[i,j] - G[i,j])*1000/300 # Entropy
}
}
}
write.matrix(H, file = "Enthalpy.csv", sep = ",", col.names = NA, qmethod = "double")
write.table(H, file = "Enthalpy.csv", sep = ",", col.names = NA, qmethod = "double")
library(maps)
install.packages("maps")
library(maps)
data(us.cities) # data on major US cities
head(us.cities)
?us.cities
dim(us.cities)
big.cities = subset(us.cities, pop > 500000)
city.loc = ggplot(big.cities,aes(long,lat))
library(ggplot2)
city.loc = ggplot(big.cities,aes(long,lat))
?ggplot
city.loc + geom_point()
city.loc = city.loc + borders("state",size=0.5,col="green")
city.loc + geom_point(aes(size=pop,color=pop),alpha=I(1/3))
city.loc + geom_point(aes(size=pop,color=pop),alpha=I(1/3)) + geom_text(aes(label=name),size=2)
city.loc + geom_point(aes(size=pop,color=pop),alpha=I(1/3)) + geom_text(aes(label=name),size=5)
ca.state = map_data("county","california")  ## data on counties in California
head(ca.state)
end(ca.state)
tail(ca.state)
pl.ca = ggplot(ca.state,aes(long,lat)) + geom_polygon(aes(group=group), fill=NA, col="blue")
pl.ca
# compute centroid of each county
centroids = ddply(ca.state,~subregion,summarize,lat=mean(lat),long=mean(long))
# add the counties' names as labels
pl.ca + geom_text(aes(label=subregion),data=centroids,size=2,angle=30)
library(plyr)
centroids = ddply(ca.state,~subregion,summarize,lat=mean(lat),long=mean(long))
# add the counties' names as labels
pl.ca + geom_text(aes(label=subregion),data=centroids,size=2,angle=30)
pl.ca + geom_text(aes(label=subregion),data=centroids,size=3,angle=30)
library(ggmap)
install.packages("ggmap")
library(ggmap)
data(crime) # data set on incidence of crimes in Houston area
head(crime)
dim(crime)
murder = subset(crime, offense == "murder")
qmplot(lon, lat, data=murder, color = I("red"), size=I(2), darken=0.3, zoom = 11)
qmplot(lon, lat, data=murder, color = I("red"), size=I(2), darken=1, zoom = 11)
qmplot(lon, lat, data=murder, color = I("red"), size=I(2), darken=0.2, zoom = 11)
names(crime)
qmplot(lon, lat, data=murder, color = I("red"), size=I(2), darken=0.2, zoom = 100)
qmplot(lon, lat, data=murder, color = I("red"), size=I(2), darken=0.2, zoom = 18)
qmplot(lon, lat, data=murder, color = I("red"), size=I(2), darken=0.2, zoom = 10)
qmplot(lon, lat, data=murder, color = factor(day), size=factor(number), darken=0.3, zoom = 11)
wh = geocode("White House")
wh
geocode("white house",output="more") # ouput :
WH = geocode("Wuhan")
WH
qmap("Davis", zoom =12) # using Google Maps
qmap("Davis", zoom =12, source = "osm") # using OpenStreetMap
SFO = get_map("san francisco",zoom=12,maptype="satellite")
ggmap(SFO)
houston = get_map("houston, texas", zoom = 11, maptype = "terrain")
ggmap(houston)
?revgeocode
str(houston)
ggmap(houston) + geom_point(aes(color=factor(day)),data=crime,size=0.2,alpha=I(1/5)) + facet_wrap(~offense)
ggmap(houston) + stat_density2d(aes(x=lon,y=lat),data=crime)
overlay = stat_density2d(aes(x=lon,y=lat, fill = ..level.., alpha = ..level..),
bins = 5, geom="polygon", data = crime)
ggmap(houston) + overlay + scale_fill_gradient(low="blue",high="red")
ggmap(houston) + stat_density2d(aes(x=lon,y=lat, color = factor(day)),data=crime)
overlay = stat_density2d(aes(x=lon,y=lat, fill = ..level.., alpha = ..level..),
bins = 5, geom="polygon", data = crime)
ggmap(houston) + overlay + scale_fill_gradient(low="blue",high="red")
ggmap(houston) + stat_density2d(aes(x=lon,y=lat,color=factor(day)),data=crime)
ggmap(houston) + stat_density2d(aes(x=lon,y=lat),data=crime) + facet_wrap(~offense)
?aes
atxt = "Text processing is here to stay! A new lesson starts here!"
atxt.lines = strsplit(atxt,split="!")
atxt.lines
atxt.words = lapply(atxt.lines[[1]],strsplit,split=" ")
atxt.words
atxt.lines = strsplit(atxt,split="!")
atxt.lines
atxt.wordvec = unlist(atxt.words)
atxt.wordvec = atxt.wordvec[atxt.wordvec !=""]  # remove the blank space ""
atxt.wordvec
match("new",atxt.wordvec)  # returns the position of the first match of "new" in the vector of words.
c("Text","new") %in% atxt.wordvec # check two words
grep("new",atxt.wordvec,ignore.case=T)
grep(" A new",atxt,ignore.case=T)
grep(" stay! t",atxt,ignore.case=T)
grep("new",atxt.lines[[1]],ignore.case=T)
grep("new",atxt.lines[[1]],ignore.case=T,value=T)
sub("new","old",atxt,ignore.case=T)
sub("new","old",atxt.lines[[1]],ignore.case=T)
loc.txn  = grep("[txn]",atxt.wordvec,ignore.case=T)
loc.txn
grep("[txn]",atxt.wordvec,ignore.case=T,value=T)
atxt.wordvec[loc.txn]
grep("[txn]",atxt.wordvec,ignore.case=T,value=T,invert = T)
atxt.wordvec[loc.txn]
grep("[t]?",atxt.wordvec,ignore.case=T,value=T)
---
title: "STA 141 HW 3"
author: "Jiewei Chen (999 494 235)"
date: "November 12, 2016"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
\pagebreak
# Appendix
## A1. Create Function geocode_uc()
The reason for creating this function geocode() is that it is redundant to retrieve data every time we run the code. So here a cache is created as a good tool to help save time and memory space.
```{r Function geocode_uc(), echo = TRUE, message = FALSE, warning  = FALSE}
geocode_uc = function(file, cache = "geocode.uc.rds") {
# cache is a good tool that help you save time and memory space
if ( (file.exists(cache)) ) {
# we have the info already, load from disk.
result = readRDS(cache)
}
else {
# if we don't have the info, get geocoding info from Google Maps
# Need to get lat/lon coordinates for each campus
# use geocode()
result = geocode(file)
saveRDS(result, cache)
}
return(result)
}
```
## A2. Create Function get_map_ca()
```{r Function get_map_ca(), echo = TRUE, message = FALSE, warning  = FALSE}
get_map_ca = function(name_ca, cache = "get_map_ca.rds") {
# cache is a good tool that help you save time and memory space
if ( (file.exists(cache)) ) {
# we have the info already, load from disk.
result = readRDS(cache)
}
else {
# if we don't have the info, get geocoding info from Google Maps
# Need to get lat/lon coordinates for each campus
# use get_map()
result = get_map(name_ca, zoom = 6, maptype="satellite")
saveRDS(result, cache)
}
return(result)
}
```
\pagebreak
# 0 Load Data
## Load Packages
```{r load packages, echo = TRUE, warning = FALSE, message = FALSE}
library(tidyverse)
library(plyr)
library(ggmap)
library(ggplot2)
library(gmapsdistance)
library(igraph)
```
## Loading Data Set
```{r load data, echo = TRUE, warning = FALSE, message = FALSE}
# Set working directory
setwd("~/Dropbox/Course Fall 2016/STA 141/HW 3")
# Load Data Set
#       Note that the names of campuses contain space,
#               so we can not simply use read.table to get the data.
#       The data has fixed-width columns, so maybe try read.fwf()
#       But we don't know the width now
#       Tidyverse ususally makes things easier
widths = fwf_empty("UC_US_News_ranking_2017_2.txt") # return the location of each space
# Get the correct name for each University
widths$begin = widths$begin[-2]
widths$end = widths$end[-1]
# set colomn names
widths$col_names = c("Campus", "Rank", "Enrollment",  "Accepted")
my_data = read_fwf("UC_US_News_ranking_2017_2.txt", widths)
```
# Problem 1
## Location of Each University
```{r Loc of Each University, echo = TRUE, message = FALSE, warning  = FALSE}
# Note that if simply use "UC X" as name, function geocode() may not work sometimes.
# Turns out that "UC X, California, USA" can work for all, except for UC Davis.
my_data$Campus = paste0(my_data$Campus, ", California, USA")
# Change the name of UC Davis
my_data$Campus[5] = "University of California Davis"
# This column of abbreviations are added for later lable of each university
my_data$short = c("UCB", "UCLA", "UCSB", "UCI", "UCD", "UCSD", "UCSC", "UCR", "UCM")
my_data[, c("Lon", "Lat")] = geocode_uc(my_data$Campus) # See Appendix for details of geocode_uc()
```
## Satellite Map of CA with borders
```{r Satellite Map of CA with borders, echo = TRUE, message = FALSE, warning  = FALSE}
CA = get_map_ca("california")
# load state boarder
shape = readShapeSpatial("tl_2016_us_state")
# turn into data.frame
shape = fortify(shape)
shape = as_data_frame(shape)
# add boarder of California
California=subset(shape,shape$id=="13")
CA_Boarders = ggmap(CA, darken  = 0.3) + # darken is used here to give better contract
geom_polygon(aes(long, lat, group = group), data=California,color = "slategray1", size=0.5, fill = NA)
# Another way to add boarder. However, there will be some boarder missing from this borders() function
#CA_Boarders = ggmap(CA, darken  = 0.3) + # darken is used here to give better contract
#        borders("state", size=0.5, col="slategray1", regions = "california")
```
## Add location of each UC campus
```{r Add location of each UC campus, echo = TRUE, message = FALSE, warning  = FALSE}
CA_UC = CA_Boarders +
# Add each campus
geom_point(data = my_data, aes(x = Lon, y = Lat), color = "orangered", size = 4) +
# labels are above the campus location
geom_text(mapping = aes(x = Lon, y = Lat + 0.3, label = short),
data = my_data, size = 4, angle = 30, color = "slategray1")
```
## 1(i) A Satellite Map of CA with State Boundary and Each Univeristy
```{r 1(i), echo = TRUE, message = FALSE, warning  = FALSE, fig.width = 8.5, fig.height = 6}
# Answer for 1(i)
CA_UC + labs(title = "A Satellite Map of CA with \n State Boundary and Each Univeristy")
```
## 1(ii) More Information of Each Campus
1. "Size of the Circle" represents the number of undergrads enrolled. The larger the size, the higher the number of undergrads enrolled.
2. "Inner Color" of the point corresponds to the rank of this campus within UC. Red means higher ranking, while yellow means lower ranking.
3. The "Inner Color" is telling us the percentage of acceptance in 2015. The lighter the border is, the lower the percentage of students accepeted in Fall 2015 is.
```{r more information, echo = TRUE, message = FALSE, warning  = FALSE, fig.width = 6, fig.height = 6, fig.align="center"}
my_data$rank_in_UC = order(my_data$Rank)
CA_UC_2 = CA_Boarders +
geom_point(data = my_data, aes(x = Lon, y = Lat, # Add each campus
size = Enrollment, color = Accepted/20,
fill = rank_in_UC),
pch = 21, stroke = 3) +
scale_fill_gradient(low = "red",high = "yellow", breaks=c(2,5,8)) +
scale_color_gradient(low = "springgreen",high = "springgreen4") +
scale_size(range=c(1,5)) +
# labels are above the campus location
geom_text(mapping = aes(x = Lon, y = Lat + 0.3, label = short),
data = my_data, size = 4, angle = 30, color = "white")
# Answer of 1.(ii)
CA_UC_2 + labs(title = "A Satellite Map with Information of Each UC Campus")
```
## 1.(iii) Find Bicycle Route b/t Each Pair of Campus
```{r Find Bicycle Route b/t Each Pair of Campus, echo = TRUE, message = FALSE, warning  = FALSE, fig.align="center"}
# Get paths b/t campus
# Find unique pairs among all nine campus
combns = combn(my_data$Campus, 2) # each coln represents a pair and each pair is unique
# mapply - mapply is a multivariate version of sapply
path = mapply(function(from, to) {
# get the bike paths
# set structure to route to use with geom_path() later
path = route(from, to, mode = "bicycling", structure = "route")
# Modify to keep track of origin and destination
# Form groups
path$tofrom = paste0(from," - ", to)
return(path) # now the result is a list
# each component of the list is a data.frame
}, combns[1, ], combns[2, ], SIMPLIFY = FALSE)
# Use rbind() to bind all data.frame together
# do call() lets you call a function with a specified list of arguments
paths = do.call(rbind, path)
paths$tofrom = factor(paths$tofrom)
plt_bike_path = CA_UC_2 + geom_path(aes(lon, lat, group = paths$tofrom), paths, color = "hotpink")
plt_bike_path + labs(title = "A Satellite Map with Bike Path among Campus")
```
# Problem 2
## 2 (i) Compute the Driving Distance
```{r Compute the Driving Distance, echo = TRUE, message = FALSE, warning  = FALSE}
# Get paths b/t campus
# Find unique pairs among all nine campus
# format the location by using the lat and lon in Google Maps
# lat first, and lon second.
latlon = paste0(my_data$Lat, ", ", my_data$Lon)
combns_2 = combn(latlon, 2) # each coln represents a pair
# mapply - mapply is a multivariate version of sapply
dis_driving = mapply(function(origin, destination) {
# get the distance between each pair of campus
rlt = mapdist(origin, destination, mode = "driving", output = "simple")$miles
rlt$ori = my_data$short[latlon == origin]
rlt$des = my_data$short[latlon == destination]
return(rlt) # now the result is a list
# each component of the list is a data.frame
}, combns_2[1, ], combns_2[2, ], SIMPLIFY = FALSE)
Dis_drive = do.call(rbind, dis_driving)
Dis_drive = as.data.frame(Dis_drive)
rownames(Dis_drive) = c(1:36)
colnames(Dis_drive)[1] = "Driving Distance"
Dis_drive[,1:3]
```
## 2 (ii) Check if Each Pair of Campus is Neighbor
```{r Check if Each Pair of Campus is Neighbor 1, echo = TRUE, message = FALSE, warning  = FALSE, fig.width = 6, fig.height = 6, fig.align="center"}
# find the neighbor campus, the distance between which is less than 100 miles
neighbor = Dis_drive[Dis_drive[1] < 100, ]
colnames(neighbor)[1] = "Driving Distance (miles)"
rownames(neighbor) = c(1:8)
neighbor[,1:3]
```
## 2 (iii) Plot Neighbor Campus
```{r Plot Neighbor Campus, echo = TRUE, message = FALSE, warning  = FALSE, fig.width = 6, fig.height = 6, fig.align="center"}
plt_2 = graph_from_data_frame(neighbor[,2:3], directed = FALSE)
# Check if there is any campus not on the Edge and Node Plot
Campus_no_neighbor = setdiff(my_data$short, names(plt_2[1]))
# Add UC Merced onto the plot, although it doesn't have any neighbor
#       it will be plotted as an isolated vertice
plt_2 = plt_2 + vertices(Campus_no_neighbor)
plot(plt_2, main = "Edge Plot of Neighboring UC Campus")
```
## 2 (iv) Depict Campus Students Enrollment
```{r Students Enrollment, echo = TRUE, message = FALSE, warning  = FALSE, fig.width = 6, fig.height = 6, fig.align="center"}
# Find out which campus has student less than 200000, and which has more than 20000
my_data$Stt.Enroll = cut(my_data$Enrollment, c(0,20000,30000),
labels = c("less than 20,000", "greater than 20,000"))
plt_3 = plt_2
# See Adjacent Matrix
plt_3[1:9]
# See what is the name of each vertices
plt_3[1]
plt_3$name = c("UCB", "UCLA", "UCI", "UCSD", "UCD", "UCSC", "UCSB", "UCR", "UCM")
V(plt_3)$color = ifelse(plt_3$name %in% my_data$short[my_data$Stt.Enroll == "less than 20,000"], "royalblue1", "orange")
plot(plt_3, main = "Edge Plot of Neighbor UC Campus \n with Student Population")
legend('topright',legend=c("population < 20,000", "population >= 20,000"), fill = c("royalblue1", "orange"),col='black', bty='n')
```
CA_Boarders
library(sp)
library(maptools)
shape = readShapeSpatial("tl_2016_us_state")
# turn into data.frame
shape = fortify(shape)
shape = as_data_frame(shape)
# add boarder of California
California=subset(shape,shape$id=="13")
CA_Boarders = ggmap(CA, darken  = 0.3) + # darken is used here to give better contract
geom_polygon(aes(long, lat, group = group), data=California,color = "slategray1", size=0.5, fill = NA)
CA_Boarders
CA_UC = CA_Boarders +
# Add each campus
geom_point(data = my_data, aes(x = Lon, y = Lat), color = "orangered", size = 4) +
# labels are above the campus location
geom_text(mapping = aes(x = Lon, y = Lat + 0.3, label = short),
data = my_data, size = 4, angle = 30, color = "slategray1")
# Answer for 1(i)
CA_UC + labs(title = "A Satellite Map of CA with \n State Boundary and Each Univeristy")
my_data$rank_in_UC = order(my_data$Rank)
CA_UC_2 = CA_Boarders +
geom_point(data = my_data, aes(x = Lon, y = Lat, # Add each campus
size = Enrollment, color = Accepted/20,
fill = rank_in_UC),
pch = 21, stroke = 3) +
scale_fill_gradient(low = "red",high = "yellow", breaks=c(2,5,8)) +
scale_color_gradient(low = "springgreen",high = "springgreen4") +
scale_size(range=c(1,5)) +
# labels are above the campus location
geom_text(mapping = aes(x = Lon, y = Lat + 0.3, label = short),
data = my_data, size = 4, angle = 30, color = "white")
# Answer of 1.(ii)
CA_UC_2 + labs(title = "A Satellite Map with Information of Each UC Campus")
plt_bike_path = CA_UC_2 + geom_path(aes(lon, lat, group = paths$tofrom), paths, color = "hotpink")
plt_bike_path + labs(title = "A Satellite Map with Bike Path among Campus")
